//       ////////// //////////         // ////////// ///////////
//       //      // //                 // //      // //  //   //
//       //      // //  //////         // //      // //  //   //
//       //      // //      // //      // ////////// //  //   //
//////// ////////// ////////// ////////// //      // //       //

//LogJam

///////////////////////////////////////////////////////////////////////////////
// Dev Switches
///////////////////////////////////////////////////////////////////////////////
// Set to true for debug outlines.
$layout-debug: false;

///////////////////////////////////////////////////////////////////////////////
// Breakpoints
///////////////////////////////////////////////////////////////////////////////
//these are just some basics to start with, feel free to use your own project's
//breakpoints
$breakpoint-mobile-small: 320px;
$breakpoint-mobile-medium: 375px;
$breakpoint-mobile-large: 425px;
$breakpoint-tablet: 768px;
$breakpoint-laptop: 1024px;
$breakpoint-laptop-large: 1440px;
$breakpoint-4k: 2560px;

///////////////////////////////////////////////////////////////////////////////
// Semantic Layout Mixin
///////////////////////////////////////////////////////////////////////////////

@mixin make-area($layout-name, $margin-size, $breakpoint-data) {
  $breakpoint-size: map-get($breakpoint-data, size);
  // Get current breakpoint's area map from the value.
  $breakpoint-areas: map-get($breakpoint-data, area);
  // assign the layout as a attribute ~="LAYOUT-NAME" so we can select it.
  // We're using the key value.
  [data-layout~="#{$layout-name}"] {
    // Assigning the default margins for all the areas' wrappers.
    .wrapper {
      margin: $margin-size / 2;
    }

    // Loop over all the semantic areas map; get their key, get their contents.
    @each $area-name, $area-data in $breakpoint-areas {
      // Get the data that dicates visibilty/display none/otherwise.
      $area-hidden: map-get($area-data, hidden);
      // Get the flexbox properties.
      $area-grow: map-get($area-data, grow);
      $area-shrink: map-get($area-data, shrink);
      $area-basis: map-get($area-data, basis);
      // Get the flexbox order.
      $area-order: map-get($area-data, order);
      // grab the map for margin.
      $area-margin-map: map-get($area-data, margin);
      // use the keyname as the value for the area name. ">" is used to only
      // directly reference the child. So we can nest layouts without fear if
      // needed.
      > [data-area~="#{$area-name}"] {
        // Check to see if we want to display this area at this resolution,
        // hidden if true, go ahead and hide it.
        @if ($area-hidden) {
          // hide this area
          display: none;
        }
        // assign the flex value
        flex-basis: #{$area-basis};
        flex-grow: #{$area-grow};
        flex-shrink: #{$area-shrink};
        // assign the order value
        order: #{$area-order};
        // Why wrapper?
        // this for IE10-11. The reason why we **need** this is flex basis
        // doesn't account for `box-sizing: border-box`. It is fixed in Edge. We
        // also get nice things like dynamic/default margin's by making wraper do
        // this work.
        > .wrapper {
          @each $margin-name, $margin-value in $area-margin-map {
            @if ($margin-value == true) {
              // Don't render anything it's already set.
            } @else if ($margin-value == false) {
              // Kill margin.
              margin-#{$margin-name}: 0;
            } @else {
              // Render custom value
              margin-#{$margin-name}: $margin-value;
            }
          }
        }
      }
    }
  }
}

@mixin logjam($layout-map) {
  // Get layout Name
  $layout-name: map-get($layout-map, layout-name);
  // Get layout margin
  $margin-size: map-get($layout-map, margin-size);
  // Get map for breakpoints
  $breakpoints: map-get($layout-map, breakpoints);


  @for $i from 1 through length($breakpoints) {
    $is-first: $i == 1;
    $is-last: $i == length($breakpoints);

    $breakpoint-data: nth(map-values($breakpoints), $i);
    $breakpoint-size: map-get($breakpoint-data, size);
    $next-data: null;
    $next-size: null;

    @if $is-last == false {
      $next-data: nth(map-values($breakpoints), $i + 1);
      $next-size: map-get($next-data, size);
    }

    @if $is-first {
      @media all and (min-width: $breakpoint-size) and (max-width: $next-size) {
        @include make-area($layout-name, $margin-size, $breakpoint-data);
      }
    } @elseif $is-last {
      @media all and (min-width: ($breakpoint-size + 1px)) {
        @include make-area($layout-name, $margin-size, $breakpoint-data);
      }
    } @else {
      @media all and (min-width: ($breakpoint-size + 1px)) and (max-width: $next-size)  {
        @include make-area($layout-name, $margin-size, $breakpoint-data);
      }
    }
  }
}

///////////////////////////////////////////////////////////////////////////////
// Selectors
///////////////////////////////////////////////////////////////////////////////
// The layout setup.
[data-layout],
[data-area] {
  // I assume you have this on, but I can't trust you.
  // I know this dosen't work in all the IE's, but it's worth a shot.
  box-sizing: border-box;
}

[data-layout] {
  display: flex;
  flex: 1;
  flex-direction: row;
  flex-wrap: wrap;
}

[data-area] {
  display: block;
}

///////////////////////////////////////////////////////////////////////////////
// Debug
///////////////////////////////////////////////////////////////////////////////
// You can use this trait in any layout to get a better idea of the positioning
// and the size
@if ($layout-debug) {
  $debug-layout-outline: #000fff;
  $debug-area-outline: #f00;
  $debug-wrapper-outline: #ffa500;

  [data-layout] {
    outline: 1px solid $debug-layout-outline;
    outline-offset: 0;

    .wrapper {
      outline: 1px solid $debug-wrapper-outline;
    }

    [data-area] {
      outline: 1px solid $debug-area-outline;
      outline-offset: -2px;
    }
  }
}

///////////////////////////////////////////////////////////////////////////////
// Layout Tools
///////////////////////////////////////////////////////////////////////////////
// Justification
[data-layout~="justify-space-around"] {
  justify-content: space-around;
}

[data-layout~="justify-start"] {
  justify-content: flex-start;
}

[data-layout~="justify-space-between"] {
  justify-content: space-between;
}

[data-layout~="justify-end"] {
  justify-content: flex-end;
}

[data-layout~="justify-center"] {
  justify-content: center;
}
// Aglignment
[data-layout~="align-start"] {
  align-items: flex-start;
}

[data-layout~="align-end"] {
  align-items: flex-end;
}

[data-layout~="align-center"] {
  align-items: center;
}

[data-layout~="align-baseline"] {
  align-items: baseline;
}

[data-layout~="align-stretch"] {
  align-items: stretch;
}

[data-layout~="no-wrap"] {
  flex-wrap: nowrap;
}

///////////////////////////////////////////////////////////////////////////////
// Out of The Box Layouts
///////////////////////////////////////////////////////////////////////////////
//Uncomment to develop using examples.
// @import 'examples/layout-holy-grail';
